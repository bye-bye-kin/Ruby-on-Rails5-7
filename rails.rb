プロフィール画像を表示する仕組みを見てみましょう。
データベースに画像のファイル名を保存しておき、そのファイル名の画像を表示します。
ファイル名を保存するために、usersテーブルにimage_nameカラムを用意しましょう。
画像ファイルは、publicフォルダ内に保存します。

ファイル名を保存するカラムを追加しよう
まずは、 users テーブルに image_name カラムを追加していく


「rails g model User image_names:string」
→モデルとマイグレーションファイルが作成される
changeメソッドの中身が自動生成される

「rails g migration」
→マイグレーションファイルのみを作成できる。
自分でchangeメソッドの中身を書く必要があります。
カラムを追加する場合にはadd_column :テーブル名, :カラム名, :データ型」とします。
作成できたら「rails db:migrate」でデータベースに反映する

class AddImageNameToUsers < ActiveRecord::Migration[5.0]
    def change
       add_column :users, :image_name, :string
    end
  end

###################################################################################################################

初期画像を設定する

ユーザー登録時に、image_nameカラムの値が「default_user.jpg」になるようにしましょう。
createアクション内の@userを定義しているところで、newメソッドの引数としてimage_nameを追加するようにします。

def create
    @user = User.new(
      name: params[:name],
      email: params[:email],
      # 引数を追加し、初期画像が設定されるようにしてください
      image_name: "default_user.jpg"

#############################################################################################################

ビューに画像を表示する

ユーザー画像を表示するためには、HTMLの<img>タグを用います。
画像はpublic/user_imagesフォルダに保存されているので、src属性の値は「/user_images/ファイル名」とする必要があります。
#Rubyのコード部分は<%= %>で囲む必要があることに注意しましょう。

####################################################################################################################

好きな画像を追加する

「type="file"」
<input>タグにを追加することで、画像ファイルを選択するボタンを表示することが出来ます。
また、画像を送信したいときには{multipart: true}をつけます

<%= form_tag("/users/#{@user.id}/update" , {multipart: true}) do %>
<p>ユーザー名</p>
<input name="name" value="<%= @user.name %>">
<p>画像</p>
<input name = "image" type = "file">

################################################################################################################

画像のファイルを作成する

Rubyのコードでファイルを扱うには、Rubyに元から用意されてあるFileクラスを用います。
ファイルを作成するためには、Fileクラスのwriteメソッドを使います。
「File.write(ファイルの場所, ファイルの中身)」とすることで、ファイルを作成することができます。

File.write("public/sample.txt","Hello World")
→「Hello Woeld」と書かれたファイルができる

############################################################################################################

送信されてきた画像を保存する
update アクションに以下の機能をつけよう。
・ファイル名をデータベースに保存
・public フォルダ内に画像を作成

#if params[:image]　　#←画像が送信された場合のみの処理になるので、ifを使う

#   @user.image_name = "#{@user.id}.jpg"　←画像のファイル名をデータベースに（カラムに）保存する
    
#   image=params[:image]　←publicフォルダ内に画像を保存する

#   File.binwrite = "public/user_images/#{@user.image_name} ", image.read"　←画像データを元に画像ファイルを作成する
  
   
 #end

 


バリデーション
データを保存する前に、無効なデータでないことを検証する機能
空のデータが保存されないようにしたり、数字以外は保存できないようにしたり、
文字数に制限を設けたり……保存するデータに制限をかける時に使います。
presence:空のデータを登録しないようにする
length:文字数の制限
uniqueness:一意であること(他に同じデータがない)
